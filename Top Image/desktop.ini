import numpy as np
import cv2 as cv
from matplotlib import pyplot as plt
import math
img = cv.imread('messi.jpg',0)
dft = cv.dft(np.float32(img),flags = cv.DFT_COMPLEX_OUTPUT)
dft_shift = np.fft.fftshift(dft)
magnitude_spectrum = 20*np.log(cv.magnitude(dft_shift[:,:,0],dft_shift[:,:,1]))
plt.subplot(121),plt.imshow(img, cmap = 'gray')
plt.title('Input Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(magnitude_spectrum, cmap = 'gray')
plt.title('Magnitude Spectrum'), plt.xticks([]), plt.yticks([])
plt.show()
rows, cols = img.shape
crow,ccol = round(rows/2) , round(cols/2)
# create a mask first, center square is 1, remaining all zeros
# mask = np.zeros((rows,cols,2),np.uint8)
# mask[crow-30:crow+30, ccol-30:ccol+30] = 1
#mask=np.ones((rows,cols,2),np.uint8)
#mask[crow-30:crow+30, ccol-30:ccol+30] = 0

varx=2000
vary=2000

varx2=200
vary2=200

mask=np.ones((rows,cols,2),np.float32)
mask2=np.zeros((rows,cols,2),np.float32)

for i in range(0,rows):
    for j in range(0,cols):
        mask[i,j,:]=1-math.exp(-math.pow((i-round(rows/2)+1),2)/vary-math.pow((j-round(cols/2)+1),2)/varx)
for i in range(0,rows):
    for j in range(0,cols):
        mask2[i,j,:]=math.exp(-math.pow((i-round(rows/2)+1),2)/vary2-math.pow((j-round(cols/2)+1),2)/varx2)

# apply mask and inverse DFT
fshift = dft_shift*mask
fshift2 = dft_shift*mask2
f_ishift = np.fft.ifftshift(fshift)
f_ishift2 = np.fft.ifftshift(fshift2)
img_back = cv.idft(f_ishift)
img_back3 = cv.idft(f_ishift2)
img_back2 = cv.magnitude(img_back[:,:,0],img_back[:,:,1])
img_back4 = cv.magnitude(img_back3[:,:,0],img_back3[:,:,1])
plt.subplot(121),plt.imshow(img, cmap = 'gray')
plt.title('Input Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(img_back2, cmap = 'gray')
plt.title('Magnitude Spectrum'), plt.xticks([]), plt.yticks([])
plt.show()
plt.subplot(121),plt.imshow(img, cmap = 'gray')
plt.title('Input Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(img_back4, cmap = 'gray')
plt.title('Magnitude Spectrum'), plt.xticks([]), plt.yticks([])
plt.show()
plt.subplot(),plt.imshow(mask[:,:,0]*255, cmap = 'gray')
plt.show()
plt.subplot(),plt.imshow(mask2[:,:,0]*255, cmap = 'gray')
plt.show()
